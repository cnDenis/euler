#! /usr/bin/env python
#coding=utf-8

#The sequence of triangle numbers is generated by adding the natural numbers.
#    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
#        The first ten terms would be:
#
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
#Let us list the factors of the first seven triangle numbers:
#
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.
#
#What is the value of the first triangle number to have over five hundred
#divisors?
#

from __future__ import print_function
from __future__ import division
from itertools import combinations

def mul(L):
    t = 1
    for n in L:
        t *= n
    return t


def trinum():
    i = 1
    t = 0
    while True:
        t += i
        yield t
        i += 1

def divcnt(n):
    i = 2
    div = []
    divs = set()
    while n > 1:
        while n % i == 0:
            div.append(i)
            n //= i
        i += 1
    for i in range(len(div)):
        for c in combinations(div, i):
            divs.add(mul(c))
    return len(divs) + 1


t = trinum()
c = 0
while c < 500:
    tt = t.next()
    c = divcnt(tt)
print(tt)

#76576500
#         3637972 function calls in 19.291 seconds
#
#   Ordered by: internal time
#
#   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#    12375   13.437    0.001   19.174    0.002 pe12.py:44(divcnt)
#  1754340    3.332    0.000    3.332    0.000 pe12.py:29(mul)
#  1754340    2.243    0.000    2.243    0.000 {method 'add' of 'set' objects}
#    67405    0.096    0.000    0.096    0.000 {method 'append' of 'list' objects}

